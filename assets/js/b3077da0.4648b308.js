"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1251],{3327:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"gists/Deep_Learning_Frameworks","title":"Deep Learning Frameworks","description":"All commands in Windows Command Prompt, and this will work for manual Python installation only.","source":"@site/docs/gists/deep_learning_frameworks.md","sourceDirName":"gists","slug":"/gists/Deep_Learning_Frameworks","permalink":"/docs/gists/Deep_Learning_Frameworks","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Deep_Learning_Frameworks","title":"Deep Learning Frameworks","sidebar_label":"Deep Learning Frameworks"},"sidebar":"tutorialSidebar","previous":{"title":"Copy Ollama Models","permalink":"/docs/gists/ollama_model_copier"},"next":{"title":"Disk Mounting","permalink":"/docs/gists/disk_mounting"}}');var o=i(4848),r=i(8453);const l={id:"Deep_Learning_Frameworks",title:"Deep Learning Frameworks",sidebar_label:"Deep Learning Frameworks"},t=void 0,a={},c=[{value:"<code>All commands in Windows Command Prompt, and this will work for manual Python installation only.</code>",id:"all-commands-in-windows-command-prompt-and-this-will-work-for-manual-python-installation-only",level:4},{value:"Check for GPU Physical presence:",id:"check-for-gpu-physical-presence",level:2},{value:"TensorFlow",id:"tensorflow",level:2},{value:"PyTorch",id:"pytorch",level:2}];function d(e){const n={code:"code",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h4,{id:"all-commands-in-windows-command-prompt-and-this-will-work-for-manual-python-installation-only",children:(0,o.jsx)(n.code,{children:"All commands in Windows Command Prompt, and this will work for manual Python installation only."})}),"\n",(0,o.jsx)(n.h2,{id:"check-for-gpu-physical-presence",children:"Check for GPU Physical presence:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"nvidia-smi\n"})}),"\n",(0,o.jsx)(n.h2,{id:"tensorflow",children:"TensorFlow"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"import tensorflow as tf; print(tf.config.list_physical_devices())\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This will return a list like ",(0,o.jsx)(n.code,{children:"[PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]"}),", check if GPU device is found, if yes then use the device number (ex: ",(0,o.jsx)(n.code,{children:"CPU:0"}),") in code."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import tensorflow as tf\ntf.config.list_physical_devices('GPU')\n\n# sample output -- [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'),\n# PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU')]\n"})}),"\n",(0,o.jsx)(n.h2,{id:"pytorch",children:"PyTorch"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"import torch; print(torch.cuda.is_available())\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This will return ",(0,o.jsx)(n.code,{children:"True"})," if GPU is available, else ",(0,o.jsx)(n.code,{children:"False"})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var s=i(6540);const o={},r=s.createContext(o);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);