"use strict";(self.webpackChunkwebsite_builder=self.webpackChunkwebsite_builder||[]).push([[4157],{3753:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"commands/delete files","title":"Deleting Files","description":"Delete huge number of files in minutes/hours","source":"@site/docs/commands/Delete_Files_Fast.md","sourceDirName":"commands","slug":"/commands/delete files","permalink":"/docs/commands/delete files","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"delete files","title":"Deleting Files","sidebar_label":"Deleting Files"},"sidebar":"docsSidebar","previous":{"title":"Anaconda","permalink":"/docs/commands/anaconda"},"next":{"title":"Directory Ownership","permalink":"/docs/commands/Directory Ownership"}}');var r=l(4848),i=l(8453);const d={id:"delete files",title:"Deleting Files",sidebar_label:"Deleting Files"},t=void 0,c={},a=[{value:"Delete huge number of files in minutes/hours",id:"delete-huge-number-of-files-in-minuteshours",level:2},{value:"Even More Speed",id:"even-more-speed",level:3},{value:"Make parallel to utilize all the available cores/thread for max speed",id:"make-parallel-to-utilize-all-the-available-coresthread-for-max-speed",level:4},{value:"Squeeze every ounce of Speed:",id:"squeeze-every-ounce-of-speed",level:4},{value:"Or hardcode after executing <code>nproc</code> in terminal:",id:"or-hardcode-after-executing-nproc-in-terminal",level:5}];function o(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"delete-huge-number-of-files-in-minuteshours",children:"Delete huge number of files in minutes/hours"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"find /path/to/folder/having/all/files -mindepth 1 -maxdepth 1 -print0 | parallel -0 rm -rvf\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Example:",(0,r.jsx)(n.code,{children:"find ./seq/ -mindepth 1 -maxdepth 1 -print0 | parallel -0 rm -rvf"})]}),"\n",(0,r.jsx)(n.p,{children:"Command Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"find ./seq/"})," => combining the find command with GNU Parallel to run rm (remove) in parallel on each immediate subfolder or file inside ",(0,r.jsx)(n.code,{children:"./seq"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-mindepth 1"})," => skip the top-level directory (here, ",(0,r.jsx)(n.code,{children:"./seq/"}),"), and only return things inside it. So, if ",(0,r.jsx)(n.code,{children:"./seq/"})," contains folder1, folder2, etc., those are the targets."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-maxdepth 1"})," => only look at immediate children (1 level deep), not recursively. So you get only (",(0,r.jsx)(n.code,{children:"./seq/folder1"}),", ",(0,r.jsx)(n.code,{children:"./seq/folder2"}),", ",(0,r.jsx)(n.code,{children:"./seq/file1.txt"}),")\u2026 not files inside those folders."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-print0"})," => outputs each result terminated with a null character (",(0,r.jsx)(n.code,{children:"\\0"}),") instead of a newline. Because filenames can contain spaces, newlines, or other weird characters. Using ",(0,r.jsx)(n.code,{children:"-print0"})," makes sure they're passed safely to the next command."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"| parallel -0"})," => puts the null-separated results to GNU parallel (which uses multiple CPU cores). The ",(0,r.jsx)(n.code,{children:"-0"})," tells parallel to expect input to be null-separated (to match ",(0,r.jsx)(n.code,{children:"-print0"}),"). This avoids filename issues, same as above."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"rm -rvf"})," => this is the command parallel runs on each item it receives."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"rm"}),": remove files/directories."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-r"}),": recursive \u2013 delete folders and everything inside."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-v"}),": verbose \u2013 print what\u2019s being deleted (this slows down the command a little bit)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-f"}),": force \u2013 ignore errors, don't prompt for confirmation."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"So for each item, parallel runs something like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"rm -rvf ./seq/folder1\nrm -rvf ./seq/file2\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u2026simultaneously across multiple CPU cores."}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.h3,{id:"even-more-speed",children:"Even More Speed"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Drop the -v flag:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"find ./seq/ -mindepth 1 -maxdepth 1 -print0 | parallel -0 rm -rf\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"--jobs N"})," to control how many processes run at once (Example, use 8 cores):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"... | parallel -0 -j 8 rm -rf\n"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.h4,{id:"make-parallel-to-utilize-all-the-available-coresthread-for-max-speed",children:"Make parallel to utilize all the available cores/thread for max speed"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"GNU parallel is smart enough to auto-detect the number of CPU cores"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"find ./seq/ -mindepth 1 -maxdepth 1 -print0 | parallel -0 rm -rf\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use as many jobs as your system can handle (nproc cores, by default)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Avoid output clutter (no -v)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Delete in blazing-fast parallel, safely."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use total number of CPU in your system directly"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["use ",(0,r.jsx)(n.code,{children:"nproc"})," command to find total number of CPU in your system"]}),"\n"]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.h4,{id:"squeeze-every-ounce-of-speed",children:"Squeeze every ounce of Speed:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'find ./seq/ -mindepth 1 -maxdepth 1 -print0 | parallel -0 -j "$(nproc)" rm -rf\n'})}),"\n",(0,r.jsxs)(n.h5,{id:"or-hardcode-after-executing-nproc-in-terminal",children:["Or hardcode after executing ",(0,r.jsx)(n.code,{children:"nproc"})," in terminal:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"\t... | parallel -0 -j 96 rm -rf\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>d,x:()=>t});var s=l(6540);const r={},i=s.createContext(r);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);